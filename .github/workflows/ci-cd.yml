name: CI/CD Pipeline para Smart Contract CRID

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Testes Unitários e Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout do código
      uses: actions/checkout@v3

    - name: Configurar Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Instalar dependências
      run: npm ci

    - name: Compilar contratos
      run: npm run compile

    - name: Executar testes
      run: npm test
      env:
        REPORT_GAS: true

    - name: Gerar relatório de cobertura
      run: npm run coverage

    - name: Upload do relatório de cobertura
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        fail_ci_if_error: false
      continue-on-error: true

    - name: Verificar cobertura mínima
      run: |
        COVERAGE=$(cat coverage/lcov.info | grep -oP '(?<=SF:).*' | wc -l)
        echo "Arquivos cobertos: $COVERAGE"
        if [ $COVERAGE -eq 0 ]; then
          echo "Erro: Nenhuma cobertura de código encontrada"
          exit 1
        fi

  security:
    name: Análise de Segurança
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout do código
      uses: actions/checkout@v3

    - name: Configurar Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Instalar Slither
      run: |
        pip3 install slither-analyzer
        pip3 install solc-select
        solc-select install 0.8.20
        solc-select use 0.8.20

    - name: Executar Slither
      run: slither contracts/CRID.sol --json slither-output.json || true

    - name: Upload relatório Slither
      uses: actions/upload-artifact@v3
      with:
        name: slither-report
        path: slither-output.json

  lint:
    name: Linting e Formatação
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout do código
      uses: actions/checkout@v3

    - name: Configurar Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Instalar dependências
      run: npm ci

    - name: Instalar Solhint
      run: npm install -g solhint

    - name: Executar Solhint
      run: solhint 'contracts/**/*.sol'

  gas-optimization:
    name: Análise de Gas
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout do código
      uses: actions/checkout@v3

    - name: Configurar Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Instalar dependências
      run: npm ci

    - name: Executar testes com relatório de gas
      run: npm test
      env:
        REPORT_GAS: true

    - name: Upload relatório de gas
      uses: actions/upload-artifact@v3
      with:
        name: gas-report
        path: gas-report.txt

  deploy-testnet:
    name: Deploy para Testnet
    runs-on: ubuntu-latest
    needs: [test, security, lint]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout do código
      uses: actions/checkout@v3

    - name: Configurar Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Instalar dependências
      run: npm ci

    - name: Compilar contratos
      run: npm run compile

    - name: Deploy para Sepolia Testnet
      run: npx hardhat run scripts/deploy.js --network sepolia
      env:
        SEPOLIA_RPC_URL: ${{ secrets.SEPOLIA_RPC_URL }}
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}

  documentation:
    name: Gerar Documentação
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout do código
      uses: actions/checkout@v3

    - name: Configurar Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Instalar dependências
      run: npm ci

    - name: Instalar Docgen
      run: npm install --save-dev @primitivefi/hardhat-dodoc

    - name: Gerar documentação
      run: npx hardhat dodoc

    - name: Upload documentação
      uses: actions/upload-artifact@v3
      with:
        name: contract-documentation
        path: docs/

  release:
    name: Criar Release
    runs-on: ubuntu-latest
    needs: [test, security, lint]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout do código
      uses: actions/checkout@v3

    - name: Configurar Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Instalar dependências
      run: npm ci

    - name: Compilar contratos
      run: npm run compile

    - name: Criar pacote de artefatos
      run: |
        mkdir -p release/contracts
        mkdir -p release/artifacts
        cp -r contracts/* release/contracts/
        cp -r artifacts/contracts/* release/artifacts/
        tar -czf contract-artifacts.tar.gz release/

    - name: Criar Release
      uses: softprops/action-gh-release@v1
      with:
        files: contract-artifacts.tar.gz
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          ## Smart Contract CRID - Release v${{ github.run_number }}
          
          ### Mudanças
          - Commit: ${{ github.sha }}
          - Branch: ${{ github.ref }}
          
          ### Artefatos
          - Contratos compilados
          - ABIs
          - Relatórios de testes
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 